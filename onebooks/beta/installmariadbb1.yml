---
- hosts: sql
  become: true
  vars:
    root_password: "123456"
  tasks:
    - name: Install Utility software
      apt: name={{item}} state=latest update_cache=yes
      with_items:
        - software-properties-common
        - python-mysqldb
    
    
    - name: Install MariaDB Packages
      apt: name={{item}} state=installed default_release=trusty update_cache=yes
      with_items:
        #- mariadb-client
        - mariadb-common
        - mariadb-server
        
    - name: Create MariaDB Directories
      file: path=/data/{{item}} state=directory owner=mysql group=mysql recurse=yes
      with_items:
        - db
        - log
    
    - name: Count files in /data/db
      find:
        path=/data/db
        patterns='\*'
      register: db_files

    - name: Start MariaDB service
      service:
        name: mariadb
        state: started
        enabled: yes

    - name: Run mysql_install_db only if /data/db is empty
      command: mysql_install_db --datadir=/data/db
      when: db_files.matched|int == 0
      
    
    - name: Is root password set?
      command: mysql -u root --execute "SELECT NOW()"
      register: is_root_password_set
      ignore_errors: yes
      
    - name: Delete anonymous users
      mysql_user:
        user=""
        state="absent"
      when: is_root_password_set.rc == 0
      
    - name: Set root password
      mysql_user:
        user=root
        password="{{root_password}}"
        host=localhost
      when: is_root_password_set.rc == 0
    
    - name: Create myapp database
      mysql_db:
        name: myapp
        login_user: root
        login_password: "{{root_password}}"
        login_host: localhost
        state: present
      when: is_root_password_set.rc == 0
      
    - name: Create user for myapp db
      mysql_user:
        name: myapp_rw
        password: "{{mysql_myapp_rw_password}}"
        priv: myapp.*:SELECT,INSERT,UPDATE,DELETE
        login_user:
        root login_password: "{{root_password}}"
        state: present
      when: is_root_password_set.rc == 0